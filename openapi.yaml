#회원가입
/**
 * @swagger
 * /auth/join:
 *   post:
 *     summary: 사용자 회원가입
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *               - name
 *               - address
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *               name:
 *                 type: string
 *               address:
 *                 type: string
 *     responses:
 *       201:
 *         description: 회원가입 성공
 *       409:
 *         description: 이미 존재하는 이메일입니다
 *       500:
 *         description: 서버 에러
 */



#로그인
 /**
 * @swagger
 * /auth/login:
 *   post:
 *     summary: 사용자 로그인
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: 로그인 성공 (토큰 발급)
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 token:
 *                   type: string
 *       401:
 *         description: 이메일 또는 비밀번호가 올바르지 않습니다
 *       500:
 *         description: 서버 에러
 */


#로그아웃
/**
 * @swagger
 * /auth/logout:
 *   post:
 *     summary: 사용자 로그아웃
 *     tags: [Auth]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: 로그아웃 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */

#자동로그인
/**
 * @swagger
 * /auth/refresh:
 *   post:
 *     summary: 토큰 재발급 (자동 로그인용)
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - refreshToken
 *             properties:
 *               refreshToken:
 *                 type: string
 *     responses:
 *       200:
 *         description: 새 액세스 토큰 발급 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 accessToken:
 *                   type: string
 *       401:
 *         description: 유효하지 않은 리프레시 토큰입니다
 *       500:
 *         description: 서버 에러
 */

# 구글 소셜 간편 로그인(간편 로그인은 회원가입도 같이 됨)
/**
 * @swagger
 * /auth/google:
 *   post:
 *     summary: 구글로 간편 로그인/가입
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - idToken
 *             properties:
 *               idToken:
 *                 type: string
 *     responses:
 *       200:
 *         description: 로그인 성공 (토큰 발급)
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 accessToken:
 *                   type: string
 *       401:
 *         description: 유효하지 않은 구글 인증 정보입니다
 *       500:
 *         description: 서버 에러
 */

# 카카오 소셜 간편 로그인(간편 로그인은 회원가입도 같이 됨)
/**
 * @swagger
 * /auth/kakao:
 *   post:
 *     summary: 카카오로 간편 로그인/가입
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - authorizationCode
 *             properties:
 *               authorizationCode:
 *                 type: string
 *     responses:
 *       200:
 *         description: 로그인 성공 (토큰 발급)
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 accessToken:
 *                   type: string
 *       401:
 *         description: 유효하지 않은 카카오 인증 정보입니다
 *       500:
 *         description: 서버 에러
 */

#  이메일로 비번 찾기 - 코드 전송 기능
/**
 * @swagger
 * /auth/password/reset-request:
 *   post:
 *     summary: 비밀번호 재설정 요청 (인증 코드 발송)
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *             properties:
 *               email:
 *                 type: string
 *     responses:
 *       200:
 *         description: 인증 코드 발송 요청 성공
 *       404:
 *         description: 가입되지 않은 이메일입니다
 *       500:
 *         description: 서버 에러
 */
 #  이메일로 비번 찾기 - 이메일 인증 후 비번 변경 기능
 /**
 * @swagger
 * /auth/password/reset:
 *   post:
 *     summary: 비밀번호 재설정 확정
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - verificationCode
 *               - newPassword
 *             properties:
 *               email:
 *                 type: string
 *               verificationCode:
 *                 type: string
 *               newPassword:
 *                 type: string
 *     responses:
 *       200:
 *         description: 비밀번호 변경 성공
 *       400:
 *         description: 인증 코드가 올바르지 않습니다
 *       500:
 *         description: 서버 에러
 */
#  전화번호로 비번 찾기 - 코드 전송 기능
/**
 * @swagger
 * /auth/password/sms-request:
 *   post:
 *     summary: 비밀번호 재설정 요청 (SMS 인증 코드 발송)
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - phoneNumber
 *             properties:
 *               phoneNumber:
 *                 type: string
 *     responses:
 *       200:
 *         description: 인증 코드 발송 요청 성공
 *       404:
 *         description: 가입되지 않은 전화번호입니다
 *       500:
 *         description: 서버 에러
 */
#  전화번호로 비번 찾기 - 번호 인증 후 비번 변경 기능
/**
 * @swagger
 * /auth/password/sms-reset:
 *   post:
 *     summary: 비밀번호 재설정 확정 (SMS 인증)
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - phoneNumber
 *               - verificationCode
 *               - newPassword
 *             properties:
 *               phoneNumber:
 *                 type: string
 *               verificationCode:
 *                 type: string
 *               newPassword:
 *                 type: string
 *     responses:
 *       200:
 *         description: 비밀번호 변경 성공
 *       400:
 *         description: 인증 코드가 올바르지 않습니다
 *       500:
 *         description: 서버 에러
 */

# 판매자 리스트
/**
 * @swagger
 * /main/popular-sellers:
 *   get:
 *     summary: 메인 화면 인기 판매자 목록 조회
 *     tags: [Main]
 *     parameters:
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: 조회할 판매자 수 (예: 10)
 *     responses:
 *       200:
 *         description: 인기 판매자 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   sellerId:
 *                     type: integer
 *                   storeName:
 *                     type: string
 *                   sellerProfileImageUrl:
 *                     type: string
 *                   followerCount:
 *                     type: integer
 *                   products:
 *                     type: array
 *                     items:
 *                       type: object
 *                       properties:
 *                         productId:
 *                           type: integer
 *                         productName:
 *                           type: string
 *                         productImageUrl:
 *                           type: string
 *                         price:
 *                           type: number
 *       500:
 *         description: 서버 에러
 */

#  최근 올라온 상품
/**
 * @swagger
 * /main/new-products:
 *   get:
 *     summary: 메인 화면 최신 상품 목록 조회
 *     tags: [Main]
 *     parameters:
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: 조회할 최신 상품 수 (예: 20)
 *     responses:
 *       200:
 *         description: 최신 상품 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   productId:
 *                     type: integer
 *                   productName:
 *                     type: string
 *                   productImageUrl:
 *                     type: string
 *                   price:
 *                     type: number
 *                   storeName:
 *                     type: string
 *       500:
 *         description: 서버 에러
 */

#  최근 인기있는 제품(일간, 주간, 월간)
/**
 * @swagger
 * /main/popular-products:
 *   get:
 *     summary: 메인 화면 인기 상품 목록 조회
 *     tags: [Main]
 *     parameters:
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: 조회할 인기 상품 수 (예: 20)
 *       - in: query
 *         name: period
 *         schema:
 *           type: string
 *           enum: [daily, weekly, monthly]
 *         description: 인기 순위 집계 기간 (일간/주간/월간)
 *     responses:
 *       200:
 *         description: 인기 상품 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   productId:
 *                     type: integer
 *                   productName:
 *                     type: string
 *                   productImageUrl:
 *                     type: string
 *                   price:
 *                     type: number
 *                   storeName:
 *                     type: string
 *       500:
 *         description: 서버 에러
 */

# 사이드 메뉴 - 물품 목록
/**
 * @swagger
 * /categories:
 *   get:
 *     summary: 전체 상품 카테고리 목록 조회
 *     tags: [Category]
 *     responses:
 *       200:
 *         description: 카테고리 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   categoryId:
 *                     type: integer
 *                   categoryName:
 *                     type: string
 *       500:
 *         description: 서버 에러
 */
 #사이드 메뉴 - 판매자 목록
 /**
 * @swagger
 * /sellers:
 *   get:
 *     summary: 전체 판매자 목록 조회
 *     tags: [Seller]
 *     responses:
 *       200:
 *         description: 판매자 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   sellerId:
 *                     type: integer
 *                   storeName:
 *                     type: string
 *       500:
 *         description: 서버 에러
 */
#사이드 메뉴 - 판매자 물품 목록
/**
 * @swagger
 * /sellers/{sellerId}/products:
 *   get:
 *     summary: 특정 판매자의 상품 목록 조회
 *     tags: [Seller]
 *     parameters:
 *       - in: path
 *         name: sellerId
 *         required: true
 *         schema:
 *           type: integer
 *         description: 상품 목록을 조회할 판매자의 ID
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 상품 목록 조회 성공
 *       404:
 *         description: 해당 판매자를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */



# 내정보 조회
 /**
 * @swagger
 * /users/me:
 *   get:
 *     summary: 내 정보 조회
 *     tags: [User]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: 내 정보 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 email:
 *                   type: string
 *                 name:
 *                   type: string
 *                 address:
 *                   type: string
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */

# 내정보 수정
/**
 * @swagger
 * /users/me:
 *   patch:
 *     summary: 내 정보 수정
 *     tags: [User]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               address:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: 내 정보 수정 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */

 #회원 탈퇴
 /**
 * @swagger
 * /users/me:
 *   delete:
 *     summary: 회원 탈퇴
 *     tags: [User]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: 회원 탈퇴 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */


#상품 목록
/**
 * @swagger
 * /products:
 *   get:
 *     summary: 상품 목록 조회
 *     tags: [Product]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: 상품 목록 조회 성공
 *       500:
 *         description: 서버 오류
 */
#  상품목록(검색창 결과)
 /**
 * @swagger
 * /products:
 *   get:
 *     summary: 상품 목록 조회 (검색 기능 포함)
 *     tags: [Product]
 *     parameters:
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: "검색할 상품명"
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: 상품 목록 조회 성공
 *       500:
 *         description: 서버 오류
 */

#상품 상세 조회
/**
 * @swagger
 * /products/{productId}:
 *   get:
 *     summary: 상품 상세 조회
 *     tags: [Product]
 *     parameters:
 *       - in: path
 *         name: productId
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 상품 상세 조회 성공
 *       404:
 *         description: 상품을 찾을 수 없습니다
 *       500:
 *         description: 서버 오류
 */
#  상품 상세 페이지 - 정보 가져오기
/**
 * @swagger
 * /products/{productId}:
 *   get:
 *     summary: 상품 상세 정보 조회 (페이지 핵심 정보)
 *     tags: [Product]
 *     parameters:
 *       - in: path
 *         name: productId
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 상품 상세 정보 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 productName:
 *                   type: string
 *                 mainImageUrl:
 *                   type: string
 *                 hashtags:
 *                   type: array
 *                   items:
 *                     type: string
 *                 price:
 *                   type: number
 *                 sellerInfo:
 *                   type: object
 *                   properties:
 *                     sellerId:
 *                       type: integer
 *                     storeName:
 *                       type: string
 *                 options:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       optionName:
 *                         type: string
 *                       optionValues:
 *                         type: array
 *                         items:
 *                           type: string
 *                 description:
 *                   type: string
 *       404:
 *         description: 상품을 찾을 수 없습니다
 */
#  상품 상세 페이지 - 구매 기능
/**
 * @swagger
 * /orders:
 *   post:
 *     summary: 주문 생성 (바로 구매)
 *     tags: [Order]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               productId:
 *                 type: integer
 *               quantity:
 *                 type: integer
 *               selectedOption:
 *                 type: string
 *     responses:
 *       201:
 *         description: 주문 생성 성공
 *       401:
 *         description: 로그인이 필요합니다
 */
#  상품 상세 페이지 - 같은 판매자 다른 상품 진열
/**
 * @swagger
 * /sellers/{sellerId}/products:
 *   get:
 *     summary: 특정 판매자의 다른 상품 목록 조회
 *     tags: [Seller]
 *     parameters:
 *       - in: path
 *         name: sellerId
 *         required: true
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: "가져올 상품 개수 (예: 3)"
 *     responses:
 *       200:
 *         description: 상품 목록 조회 성공
 *       404:
 *         description: 해당 판매자를 찾을 수 없습니다
 */
#  상품 상세 페이지 - 리뷰
/**
 * @swagger
 * /products/{productId}/reviews:
 *   get:
 *     summary: 상품 리뷰 목록 조회
 *     tags: [Review]
 *     parameters:
 *       - in: path
 *         name: productId
 *         required: true
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: "가져올 리뷰 개수 (예: 3)"
 *     responses:
 *       200:
 *         description: 리뷰 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   rating:
 *                     type: number
 *                   reviewTitle:
 *                     type: string
 *                   authorProfileUrl:
 *                     type: string
 *                   createdAt:
 *                     type: string
 *                     format: date
 *                   content:
 *                     type: string
 *       404:
 *         description: 상품을 찾을 수 없습니다
 */

# 주문 기능
/**
 * @swagger
 * /orders:
 *   post:
 *     summary: 주문 생성
 *     tags: [Order]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               cartItemIds:
 *                 type: array
 *                 items:
 *                   type: integer
 *                 description: "주문할 장바구니 아이템들의 ID 목록"
 *               shippingAddress:
 *                 type: string
 *                 description: "배송지 주소"
 *               recipientName:
 *                 type: string
 *                 description: "받는 사람 이름"
 *               paymentMethod:
 *                 type: string
 *                 description: "결제 수단 (예: CREDIT_CARD)"
 *     responses:
 *       201:
 *         description: 주문 생성 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 orderId:
 *                   type: integer
 *                 message:
 *                   type: string
 *                   example: "주문이 성공적으로 완료되었습니다."
 *       400:
 *         description: 주문 실패 (잘못된 요청)
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "주문 실패: 재고가 부족합니다."
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  비회원 주문 기능
/**
 * @swagger
 * /orders/non-member/lookup:
 *   get:
 *     summary: 비회원 주문 조회
 *     tags: [Order]
 *     parameters:
 *       - in: query
 *         name: orderNumber
 *         required: true
 *         schema:
 *           type: string
 *         description: "주문 시 발급받은 주문번호"
 *       - in: query
 *         name: name
 *         required: true
 *         schema:
 *           type: string
 *         description: "주문 시 입력한 주문자 이름"
 *       - in: query
 *         name: password
 *         required: true
 *         schema:
 *           type: string
 *         description: "주문 시 설정한 간이 비밀번호"
 *     responses:
 *       200:
 *         description: 비회원 주문 조회 성공
 *       404:
 *         description: 주문 정보를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */

#장바구니 조회
/**
 * @swagger
 * /cart:
 *   get:
 *     summary: 내 장바구니 조회
 *     tags: [Cart]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: 내 장바구니 조회 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 오류
 */
 #장바구니 수량 변경
 /**
 * @swagger
 * /cart/items/{itemId}:
 *   patch:
 *     summary: 장바구니 상품 수량 변경
 *     tags: [Cart]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: itemId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "수량을 변경할 장바구니 아이템의 ID"
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               quantity:
 *                 type: integer
 *     responses:
 *       200:
 *         description: 수량 변경 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       404:
 *         description: 해당 상품을 장바구니에서 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  장바구니 상품 삭제
/**
 * @swagger
 * /cart/items/{itemId}:
 *   delete:
 *     summary: 장바구니 상품 삭제
 *     tags: [Cart]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: itemId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "삭제할 장바구니 아이템의 ID"
 *     responses:
 *       200:
 *         description: 상품 삭제 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       404:
 *         description: 해당 상품을 장바구니에서 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */

# 상단바 카테고리 목록 조회
/**
 * @swagger
 * /categories:
 *   get:
 *     summary: 전체 상품 카테고리 목록 조회
 *     tags: [Category]
 *     responses:
 *       200:
 *         description: 카테고리 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   categoryId:
 *                     type: integer
 *                   categoryName:
 *                     type: string
 *       500:
 *         description: 서버 에러
 */

#  특정 판매자 팔로우
/**
 * @swagger
 * /sellers/{sellerId}/follow:
 *   post:
 *     summary: 특정 판매자 팔로우하기
 *     tags: [Follow]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sellerId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "팔로우할 판매자의 ID"
 *     responses:
 *       200:
 *         description: 팔로우 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       404:
 *         description: 해당 판매자를 찾을 수 없습니다
 *       409:
 *         description: 이미 팔로우한 판매자입니다
 *       500:
 *         description: 서버 에러
 */
#  특정 판매자 언팔로우
/**
 * @swagger
 * /sellers/{sellerId}/follow:
 *   delete:
 *     summary: 특정 판매자 언팔로우하기
 *     tags: [Follow]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sellerId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "언팔로우할 판매자의 ID"
 *     responses:
 *       200:
 *         description: 언팔로우 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       404:
 *         description: 해당 판매자를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  내가 팔로우하는 사람 목록 조회
/**
 * @swagger
 * /users/me/following:
 *   get:
 *     summary: 내가 팔로우하는 판매자 목록 보기
 *     tags: [Follow]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 팔로우 목록 조회 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */

#  DM 목록 조회
/**
 * @swagger
 * /chats:
 *   get:
 *     summary: 내 채팅방 목록 조회
 *     tags: [Chat]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 채팅방 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   roomId:
 *                     type: integer
 *                   partnerName:
 *                     type: string
 *                   lastMessage:
 *                     type: string
 *                   unreadCount:
 *                     type: integer
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */
# 새DM 시작
/**
 * @swagger
 * /chats:
 *   post:
 *     summary: 새로운 채팅 시작하기
 *     tags: [Chat]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               sellerId:
 *                 type: integer
 *                 description: "채팅을 시작할 상대방(판매자)의 ID"
 *               initialMessage:
 *                 type: string
 *                 description: "처음으로 보낼 메시지"
 *     responses:
 *       201:
 *         description: 채팅방 생성 및 메시지 전송 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 roomId:
 *                   type: integer
 *       401:
 *         description: 로그인이 필요합니다
 *       404:
 *         description: 해당 판매자를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  과거 DM내용 불러오기
/**
 * @swagger
 * /chats/{roomId}/messages:
 *   get:
 *     summary: 과거 대화 내용 불러오기
 *     tags: [Chat]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: roomId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "메시지를 조회할 채팅방의 ID"
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 과거 메시지 조회 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 해당 채팅방에 접근할 권한이 없습니다
 *       404:
 *         description: 해당 채팅방을 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */

#  리뷰 작성 - 상품
/**
 * @swagger
 * /products/{productId}/reviews:
 *   post:
 *     summary: 상품 리뷰 작성 (이미지 포함)
 *     tags: [Review]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: productId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "리뷰를 작성할 상품의 ID"
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               rating:
 *                 type: number
 *                 description: "별점 (1 ~ 5)"
 *               title:
 *                 type: string
 *                 description: "리뷰 제목"
 *               content:
 *                 type: string
 *                 description: "리뷰 본문 내용"
 *               images:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *                 description: "업로드할 리뷰 이미지 (최대 3개)"
 *     responses:
 *       201:
 *         description: 리뷰 작성 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 이 상품을 구매한 사용자만 리뷰를 작성할 수 있습니다
 *       404:
 *         description: 상품을 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  리뷰 작성 - 판매자
/**
 * @swagger
 * /orders/{orderId}/seller-review:
 *   post:
 *     summary: 판매자 리뷰 작성
 *     tags: [Review]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: orderId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "리뷰를 작성할 대상 주문의 ID"
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               rating:
 *                 type: number
 *                 description: "판매자에 대한 별점 (1 ~ 5)"
 *               content:
 *                 type: string
 *                 description: "판매자 리뷰 본문 내용"
 *               images:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *                 description: "업로드할 리뷰 이미지"
 *     responses:
 *       201:
 *         description: 판매자 리뷰 작성 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 이 주문에 대해 리뷰를 작성할 권한이 없습니다
 *       404:
 *         description: 해당 주문을 찾을 수 없습니다
 *       409:
 *         description: 이미 이 주문에 대한 판매자 리뷰를 작성했습니다
 *       500:
 *         description: 서버 에러
 */

#  문의(Q&A)등록
/**
 * @swagger
 * /qna:
 *   post:
 *     summary: 새로운 1:1 문의 등록
 *     tags: [Q&A]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *                 description: "문의 제목"
 *               content:
 *                 type: string
 *                 description: "문의 내용"
 *               isPublic:
 *                 type: boolean
 *                 description: "공개 여부 (true: 공개, false: 비공개)"
 *     responses:
 *       201:
 *         description: 문의 등록 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */
# 공개한 문의 목록 조회
/**
 * @swagger
 * /qna:
 *   get:
 *     summary: 공개된 문의 목록 조회
 *     tags: [Q&A]
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 공개된 문의 목록 조회 성공
 *       500:
 *         description: 서버 에러
 */
#  내가 올린 문의목록 조회
/**
 * @swagger
 * /users/me/qna:
 *   get:
 *     summary: 나의 문의 내역 조회
 *     tags: [Q&A]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 나의 문의 내역 조회 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  문의 상세 조회
/**
 * @swagger
 * /qna/{qnaId}:
 *   get:
 *     summary: 특정 문의 상세 조회
 *     tags: [Q&A]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: qnaId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "조회할 문의의 ID"
 *     responses:
 *       200:
 *         description: 문의 상세 조회 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 이 문의를 조회할 권한이 없습니다
 *       404:
 *         description: 해당 문의를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
# 문의 삭제
/**
 * @swagger
 * /qna/{qnaId}:
 *   delete:
 *     summary: 문의 삭제
 *     tags: [Q&A]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: qnaId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "삭제할 문의의 ID"
 *     responses:
 *       200:
 *         description: 문의 삭제 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 이 문의를 삭제할 권한이 없습니다
 *       404:
 *         description: 해당 문의를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */

#  판매자

# 판매자 자격 신청
/**
 * @swagger
 * /users/me/seller-application:
 *   post:
 *     summary: 판매자 자격 신청
 *     tags: [User, Seller]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               storeName:
 *                 type: string
 *                 description: "사용할 스토어(상점) 이름"
 *               contactNumber:
 *                 type: string
 *                 description: "연락 가능한 전화번호"
 *     responses:
 *       201:
 *         description: 판매자 자격 신청 성공 (처리 대기중)
 *       401:
 *         description: 로그인이 필요합니다
 *       409:
 *         description: 이미 판매자이거나 신청 처리중입니다
 *       500:
 *         description: 서버 에러
 */

 
#상품등록
/**
 * @swagger
 * /products:
 *   post:
 *     summary: 상품 등록
 *     tags: [Product]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 description: 상품명
 *               price:
 *                 type: number
 *                 description: 가격
 *               stock:
 *                 type: integer
 *                 description: 재고 수량
 *               detail:
 *                 type: string
 *                 description: 상품 상세 설명
 *               img:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *                 description: 업로드할 상품 이미지 (최대 5개)
 *     responses:
 *       201:
 *         description: 상품 등록 성공
 *       400:
 *         description: 잘못된 요청 (필수 값 누락 등)
 *       401:
 *         description: 판매자 로그인이 필요합니다
 *       500:
 *         description: 서버 오류
 */

#상품수정
/**
 * @swagger
 * /products/{productId}:
 *   patch:
 *     summary: 상품 정보 수정
 *     tags: [Product]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: productId
 *         required: true
 *         schema:
 *           type: integer
 *         description: 수정할 상품의 ID
 *     requestBody:
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               price:
 *                 type: number
 *               stock:
 *                 type: integer
 *               detail:
 *                 type: string
 *               img:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *     responses:
 *       200:
 *         description: 상품 정보 수정 성공
 *       400:
 *         description: 잘못된 요청
 *       401:
 *         description: 판매자 로그인이 필요합니다
 *       403:
 *         description: 상품을 수정할 권한이 없습니다
 *       404:
 *         description: 상품을 찾을 수 없습니다
 *       500:
 *         description: 서버 오류
 */

#상품 삭제
/**
 * @swagger
 * /products/{productId}:
 *   delete:
 *     summary: 상품 삭제
 *     tags: [Product]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: productId
 *         required: true
 *         schema:
 *           type: integer
 *         description: 삭제할 상품의 ID
 *     responses:
 *       200:
 *         description: 상품 삭제 성공
 *       401:
 *         description: 판매자 로그인이 필요합니다
 *       403:
 *         description: 상품을 삭제할 권한이 없습니다
 *       404:
 *         description: 상품을 찾을 수 없습니다
 *       500:
 *         description: 서버 오류
 */

#  내 정보 조회(판매자)
/**
 * @swagger
 * /users/me:
 *   get:
 *     summary: 내 정보 조회 (판매자 정보 포함)
 *     tags: [Seller Profile]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: 내 정보 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 email:
 *                   type: string
 *                 name:
 *                   type: string
 *                 address:
 *                   type: string
 *                 profileImageUrl:
 *                   type: string
 *                   description: "프로필 사진 이미지 주소"
 *                 introduction:
 *                   type: string
 *                   description: "자기소개"
 *                 role:
 *                   type: string
 *                   enum: [SELLER]
 *                 # --- 판매자 스토어 정보 ---
 *                 storeName:
 *                   type: string
 *                   description: "스토어(상점) 이름"
 *                 storeHashtags:
 *                   type: array
 *                   items:
 *                     type: string
 *                   description: "스토어 대표 해시태그 목록"
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */
# 내 정보 수정(판매자)
/**
 * @swagger
 * /users/me:
 *   patch:
 *     summary: 내 정보 수정 (판매자 정보 포함)
 *     tags: [Seller Profile]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               address:
 *                 type: string
 *               profileImageUrl:
 *                 type: string
 *                 description: "새 프로필 사진 이미지 주소"
 *               introduction:
 *                 type: string
 *                 description: "새 자기소개"
 *               storeName:
 *                 type: string
 *                 description: "새 스토어 이름"
 *               storeHashtags:
 *                 type: array
 *                 items:
 *                   type: string
 *                 description: "새 스토어 해시태그 목록"
 *     responses:
 *       200:
 *         description: 내 정보 수정 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  등록 상품 조회
/**
 * @swagger
 * /sellers/me/products:
 *   get:
 *     summary: 내가 등록한 상품 목록 조회
 *     tags: [Seller Profile]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: "검색할 상품명"
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 시작일 (YYYY-MM-DD)"
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 종료일 (YYYY-MM-DD)"
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 상품 목록 조회 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 판매자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */
# 구매자 차단(DM)
/**
 * @swagger
 * /users/{userId}/block:
 *   post:
 *     summary: 사용자 차단하기
 *     tags: [Communication]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "차단할 사용자의 ID"
 *     responses:
 *       200:
 *         description: 사용자 차단 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       404:
 *         description: 차단할 사용자를 찾을 수 없습니다
 *       409:
 *         description: 이미 차단한 사용자입니다
 *       500:
 *         description: 서버 에러
 */

#  관리자

#판매자격 기능
# 판매자격 신청 목록 조회
/**
 * @swagger
 * /admin/seller-applications:
 *   get:
 *     summary: 판매자격 신청 목록 조회 (관리자 전용)
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 신청 목록 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   applicationId:
 *                     type: integer
 *                   userId:
 *                     type: integer
 *                   username:
 *                     type: string
 *                   storeName:
 *                     type: string
 *                   applicationDate:
 *                     type: string
 *                     format: date
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  판매자격 부여
/**
 * @swagger
 * /admin/seller-applications/{applicationId}/approve:
 *   patch:
 *     summary: 판매자 자격 승인 (관리자 전용)
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: applicationId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "승인할 신청의 ID"
 *     responses:
 *       200:
 *         description: 판매자 자격 승인 성공
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       404:
 *         description: 해당 신청을 찾을 수 없습니다
 *       409:
 *         description: 이미 처리된 신청입니다
 *       500:
 *         description: 서버 에러
 */
#  상점 사용자 전체 조회
/**
 * @swagger
 * /admin/users:
 *   get:
 *     summary: 전체 사용자 목록 조회 (관리자 전용)
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: "검색할 사용자 이름 또는 이메일"
 *       - in: query
 *         name: role
 *         schema:
 *           type: string
 *           enum: [BUYER, SELLER]
 *         description: "특정 역할의 사용자만 필터링 (선택 사항)"
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 사용자 목록 조회 성공
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  사용자 정보 수정(관리자)
/**
 * @swagger
 * /admin/users/{userId}:
 *   patch:
 *     summary: 사용자 정보 강제 수정 (관리자 전용)
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "수정할 사용자의 ID"
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               address:
 *                 type: string
 *               role:
 *                 type: string
 *                 enum: [BUYER, SELLER]
 *                 description: "사용자 역할 강제 변경"
 *     responses:
 *       200:
 *         description: 사용자 정보 수정 성공
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       404:
 *         description: 해당 사용자를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  사용자 정보 삭제(관리자)
/**
 * @swagger
 * /admin/users/{userId}:
 *   delete:
 *     summary: 사용자 계정 강제 삭제 (관리자 전용)
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "삭제할 사용자의 ID"
 *     responses:
 *       200:
 *         description: 사용자 계정 삭제 성공
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       404:
 *         description: 해당 사용자를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  사이트 전체 주문내역 조회
/**
 * @swagger
 * /admin/orders:
 *   get:
 *     summary: 전체 주문 내역 검색/조회 (관리자 전용)
 *     tags: [Admin, Order]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: orderNumber
 *         schema:
 *           type: string
 *         description: "검색할 주문번호"
 *       - in: query
 *         name: buyerId
 *         schema:
 *           type: integer
 *         description: "특정 구매자의 주문만 필터링"
 *       - in: query
 *         name: sellerId
 *         schema:
 *           type: integer
 *         description: "특정 판매자의 주문만 필터링"
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: 주문 내역 조회 성공
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  주문 정보 수정
/**
 * @swagger
 * /admin/orders/{orderId}:
 *   patch:
 *     summary: 주문 정보 수정 (관리자 전용)
 *     tags: [Admin, Order]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: orderId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "수정할 주문의 ID"
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               orderStatus:
 *                 type: string
 *                 description: "변경할 주문 상태 (예: 배송중, 배송완료, 주문취소)"
 *               adminMemo:
 *                 type: string
 *                 description: "관리자 특이사항 메모"
 *     responses:
 *       200:
 *         description: 주문 정보 수정 성공
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       404:
 *         description: 해당 주문을 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  주문 정보 삭제
/**
 * @swagger
 * /admin/orders/{orderId}:
 *   delete:
 *     summary: 주문 내역 삭제 (관리자 전용)
 *     tags: [Admin, Order]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: orderId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "삭제할 주문의 ID"
 *     responses:
 *       200:
 *         description: 주문 내역 삭제 성공
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       404:
 *         description: 해당 주문을 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */
#  전체 이용자 수 통계
/**
 * @swagger
 * /admin/statistics/users/summary:
 *   get:
 *     summary: 전체 이용자 수 통계 (관리자 전용)
 *     tags: [Admin, Statistics]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: 전체 이용자 수 통계 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 totalUsers:
 *                   type: integer
 *                   description: "총 이용자 수"
 *                 buyerCount:
 *                   type: integer
 *                   description: "구매자 수"
 *                 sellerCount:
 *                   type: integer
 *                   description: "판매자 수"
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  신규 가입자 추이 통계
/**
 * @swagger
 * /admin/statistics/users/trend:
 *   get:
 *     summary: 가입자 수 추이 통계 (관리자 전용)
 *     tags: [Admin, Statistics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: period
 *         schema:
 *           type: string
 *           enum: [daily, weekly, monthly]
 *         description: "집계 기간 단위 (일별/주별/월별)"
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 시작일 (YYYY-MM-DD)"
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 종료일 (YYYY-MM-DD)"
 *     responses:
 *       200:
 *         description: 가입자 수 추이 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   date:
 *                     type: string
 *                     format: date
 *                   signupCount:
 *                     type: integer
 *                     description: "해당 기간의 신규 가입자 수"
 *       401:
 *         description: 관리자 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */

# 문의 답변 등록(관리자 계정)
/**
 * @swagger
 * /admin/qna/{qnaId}:
 *   patch:
 *     summary: 문의에 답변 등록 (관리자 전용)
 *     tags: [Q&A, Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: qnaId
 *         required: true
 *         schema:
 *           type: integer
 *         description: "답변을 등록할 문의의 ID"
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               answer:
 *                 type: string
 *                 description: "관리자의 답변 내용"
 *     responses:
 *       200:
 *         description: 답변 등록 성공
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 관리자 권한이 필요합니다
 *       404:
 *         description: 해당 문의를 찾을 수 없습니다
 *       500:
 *         description: 서버 에러
 */




 #  통계

# 상품 이용자 및 팔로워 통계(판매자)
/**
 * @swagger
 * /statistics/followers/summary:
 *   get:
 *     summary: 팔로워 요약 통계 조회 (파이 차트용)
 *     tags: [Statistics]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: 팔로워 요약 통계 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 genderDistribution:
 *                   type: object
 *                   properties:
 *                     male:
 *                       type: integer
 *                     female:
 *                       type: integer
 *                     other:
 *                       type: integer
 *                 ageDistribution:
 *                   type: object
 *                   properties:
 *                     "10s":
 *                       type: integer
 *                     "20s":
 *                       type: integer
 *                     "30s":
 *                       type: integer
 *                     "40s_and_above":
 *                       type: integer
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 판매자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  날짜별 팔로워 수 통계(판매자)
 /**
 * @swagger
 * /statistics/followers/trend:
 *   get:
 *     summary: 팔로워 수 추이 통계 조회 (꺾은선 그래프용)
 *     tags: [Statistics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: period
 *         schema:
 *           type: string
 *           enum: [daily, weekly, monthly]
 *         description: "집계 기간 단위 (일별/주별/월별)"
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 시작일 (YYYY-MM-DD)"
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 종료일 (YYYY-MM-DD)"
 *     responses:
 *       200:
 *         description: 팔로워 수 추이 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   date:
 *                     type: string
 *                     format: date
 *                   count:
 *                     type: integer
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 판매자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */
#  판매상품 조회 통계(판매자)
/**
 * @swagger
 * /statistics/sales/trend:
 *   get:
 *     summary: 판매 상품 통계 조회 (꺾은선 그래프용)
 *     tags: [Statistics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: period
 *         schema:
 *           type: string
 *           enum: [daily, weekly, monthly]
 *         description: "집계 기간 단위 (일별/주별/월별)"
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 시작일 (YYYY-MM-DD)"
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: "조회 종료일 (YYYY-MM-DD)"
 *       - in: query
 *         name: productId
 *         schema:
 *           type: integer
 *         description: "특정 상품만 조회할 경우 상품 ID (선택 사항)"
 *     responses:
 *       200:
 *         description: 판매 통계 조회 성공
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   date:
 *                     type: string
 *                     format: date
 *                   salesCount:
 *                     type: integer
 *                     description: "판매 개수"
 *                   totalRevenue:
 *                     type: number
 *                     description: "총 판매액"
 *       401:
 *         description: 로그인이 필요합니다
 *       403:
 *         description: 판매자 권한이 필요합니다
 *       500:
 *         description: 서버 에러
 */